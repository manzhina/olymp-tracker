import streamlit as st
from sqlalchemy.orm import Session
import pandas as pd
import sys
import os

project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

from core import crud
from core.crud import get_db
from core.models import EventTypeEnum

st.set_page_config(layout="wide")
st.title("üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")

db_session_generator = get_db()
db: Session = next(db_session_generator)

try:
    if 'selected_event_id' not in st.session_state:
        st.session_state.selected_event_id = None

    col1, col2 = st.columns([1, 2])

    with col1:
        st.header("–°–ø–∏—Å–æ–∫ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
        events = crud.get_all_events(db)
        if not events:
            st.info("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
        else:
            event_names = [f"{event.event_name} ({event.event_type.value})" for event in events]
            selected_event_name_display = st.radio(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
                options=event_names,
                key="event_selector_radio"
            )
            if selected_event_name_display:
                st.session_state.selected_event_id = events[event_names.index(selected_event_name_display)].event_id


        with st.expander("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", expanded=False):
            with st.form("new_event_form", clear_on_submit=True):
                event_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è*")
                event_type_value = st.selectbox(
                    "–¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è*",
                    options=[et.value for et in EventTypeEnum],
                    format_func=lambda x: x
                )
                event_desc = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ")
                event_start_date = st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", value=None)
                event_end_date = st.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", value=None)
                event_organizer = st.text_input("–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä")
                submitted_event = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

                if submitted_event:
                    if not event_name or not event_type_value:
                        st.warning("–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.")
                    else:
                        try:
                            event_type_enum = EventTypeEnum(event_type_value)
                            created_event = crud.create_event(
                                db,
                                event_name=event_name,
                                event_type=event_type_enum,
                                description=event_desc,
                                start_date=event_start_date,
                                end_date=event_end_date,
                                organizer=event_organizer
                            )
                            st.success(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{created_event.event_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
                            st.session_state.selected_event_id = created_event.event_id
                            st.rerun()
                        except Exception as e:
                            if "UNIQUE constraint failed: Events.event_name" in str(e):
                                st.error(f"–û—à–∏–±–∫–∞: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{event_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                            else:
                                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
                                st.exception(e)
    
    with col2:
        if st.session_state.selected_event_id:
            event = crud.get_event_by_id(db, st.session_state.selected_event_id)
            if event:
                st.header(f"–î–µ—Ç–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {event.event_name}")
                st.markdown(f"**–¢–∏–ø:** {event.event_type.value}")
                if event.start_date:
                    st.markdown(f"**–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:** {event.start_date.strftime('%d.%m.%Y')}")
                if event.end_date:
                    st.markdown(f"**–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:** {event.end_date.strftime('%d.%m.%Y')}")
                if event.organizer:
                    st.markdown(f"**–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:** {event.organizer}")
                if event.description:
                    st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {event.description}")
                
                st.divider()
                st.subheader("–£—á–µ–±–Ω—ã–µ –≥—Ä—É–ø–ø—ã –≤ —Ä–∞–º–∫–∞—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
                groups_in_event = crud.get_groups_for_event(db, event.event_id)
                if groups_in_event:
                    group_data = [{"ID": g.group_id, "–ù–∞–∑–≤–∞–Ω–∏–µ": g.group_name, "–û–ø–∏—Å–∞–Ω–∏–µ": g.description or "-"} for g in groups_in_event]
                    st.dataframe(pd.DataFrame(group_data).set_index("ID"), use_container_width=True)
                else:
                    st.info("–ö —ç—Ç–æ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã.")
                
                st.divider()
                st.subheader("–£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
                participants_in_event = crud.get_students_in_event(db, event.event_id)
                if participants_in_event:
                    participant_data = [{"ID": p.student_id, "–§–∞–º–∏–ª–∏—è": p.last_name, "–ò–º—è": p.first_name, "–®–∫–æ–ª–∞": p.school_name or "-"} for p in participants_in_event]
                    st.dataframe(pd.DataFrame(participant_data).set_index("ID"), use_container_width=True)

                    with st.form(f"remove_participant_form_{event.event_id}"):
                        student_to_remove_options = {f"{s.last_name} {s.first_name}": s.student_id for s in participants_in_event}
                        student_to_remove_name = st.selectbox("–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞:", options=list(student_to_remove_options.keys()))
                        submitted_remove_participant = st.form_submit_button("–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")
                        if submitted_remove_participant and student_to_remove_name:
                            student_id_to_remove = student_to_remove_options[student_to_remove_name]
                            try:
                                crud.remove_student_from_event(db, student_id_to_remove, event.event_id)
                                st.success(f"–£—á–∞—Å—Ç–Ω–∏–∫ '{student_to_remove_name}' —É–¥–∞–ª–µ–Ω —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
                                st.rerun()
                            except Exception as e:
                                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")

                else:
                    st.info("–ù–∞ —ç—Ç–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")

                with st.form(f"add_participant_form_{event.event_id}", clear_on_submit=True):
                    st.write("–î–æ–±–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–µ–Ω–∏–∫–∞ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞:")
                    all_students = crud.get_all_students(db)
                    student_options = {f"{s.last_name} {s.first_name} (ID: {s.student_id})": s.student_id for s in all_students if s not in participants_in_event}
                    
                    if student_options:
                        selected_student_label = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:", options=list(student_options.keys()))
                        participant_role = st.text_input("–†–æ–ª—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", value="–£—á–µ–Ω–∏–∫")
                        submitted_add_participant = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")

                        if submitted_add_participant and selected_student_label:
                            student_id_to_add = student_options[selected_student_label]
                            try:
                                crud.add_student_to_event(db, student_id_to_add, event.event_id, role=participant_role)
                                st.success(f"–£—á–µ–Ω–∏–∫ '{selected_student_label}' –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
                                st.rerun()
                            except Exception as e:
                                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
                    else:
                        st.info("–í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—á–µ–Ω–∏–∫–∏ —É–∂–µ —è–≤–ª—è—é—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–ª–∏ —É—á–µ–Ω–∏–∫–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ.")

                st.divider()
                st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–±–∞–∑–æ–≤–∞—è)")
                st.write(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants_in_event)}")
                st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–±–Ω—ã—Ö –≥—Ä—É–ø–ø: {len(groups_in_event)}")


            else:
                st.info("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.")

finally:
    if 'db' in locals() and db:
        db.close()