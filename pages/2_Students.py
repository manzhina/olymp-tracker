import streamlit as st
from sqlalchemy.orm import Session
import pandas as pd
import sys
import os

project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

from core import crud, analysis
from core.crud import get_db

st.set_page_config(layout="wide")
st.title("üßë‚Äçüéì –£—á–µ–Ω–∏–∫–∏")

db_session_generator = get_db()
db: Session = next(db_session_generator)

try:
    groups = crud.get_all_groups(db)
    group_options = {group.group_name: group.group_id for group in groups}
    selected_group_name = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–µ–Ω–∏–∫–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö:",
        options=[""] + list(group_options.keys()),
        key="student_page_group_selector"
    )
    selected_group_id = group_options.get(selected_group_name)

    if selected_group_id:
        st.header(f"–£—á–µ–Ω–∏–∫–∏ –≤ –≥—Ä—É–ø–ø–µ: {selected_group_name}")
        students_in_group = crud.get_students_in_group(db, selected_group_id)

        if students_in_group:
            student_data = []
            prog_text = "–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤..."
            prog_bar = st.progress(0, text=prog_text)
            total_students = len(students_in_group)

            for i, s in enumerate(students_in_group):
                total_score = analysis.calculate_student_total_score_in_group(db, s.student_id, selected_group_id)
                total_solved = analysis.calculate_student_total_solved_in_group(db, s.student_id, selected_group_id)
                student_data.append({
                    "ID": s.student_id,
                    "–§–∞–º–∏–ª–∏—è": s.last_name,
                    "–ò–º—è": s.first_name,
                    "–®–∫–æ–ª–∞": s.school_name or "-",
                    "–ó–∞–¥–∞—á —Ä–µ—à–µ–Ω–æ (–≥—Ä—É–ø–ø–∞)": total_solved,
                    "–û–±—â–∏–π –±–∞–ª–ª (–≥—Ä—É–ø–ø–∞)": total_score
                })
                prog_bar.progress((i + 1) / total_students, text=f"{prog_text} ({i+1}/{total_students})")
            prog_bar.empty()

            students_df = pd.DataFrame(student_data).set_index("ID")
            st.subheader("–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)")
            st.dataframe(students_df, use_container_width=True)
        else:
            st.info("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.")

        st.divider()

        st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø—É")
        with st.form("add_student_form", clear_on_submit=True):
            st.write("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            s_last_name = st.text_input("–§–∞–º–∏–ª–∏—è*")
            s_first_name = st.text_input("–ò–º—è*")
            s_school = st.text_input("–®–∫–æ–ª–∞")
            submitted_add = st.form_submit_button("–ù–∞–π—Ç–∏ / –°–æ–∑–¥–∞—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É")

            if submitted_add:
                if not s_last_name or not s_first_name:
                    st.warning("–§–∞–º–∏–ª–∏—è –∏ –ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.")
                else:
                    found_students = crud.find_students_by_name(db, first_name=s_first_name, last_name=s_last_name)
                    student_to_add = None

                    if found_students:
                        if len(found_students) == 1:
                             student_to_add = found_students[0]
                             st.info(f"–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É—á–µ–Ω–∏–∫: {student_to_add.last_name} {student_to_add.first_name} (ID: {student_to_add.student_id}).")
                        else:
                            st.warning(f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–æ–≤ —Å –∏–º–µ–Ω–µ–º {s_first_name} {s_last_name}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ —à–∫–æ–ª—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                            student_to_add = None
                    
                    if not student_to_add and not found_students:
                        try:
                            student_to_add = crud.create_student(db, first_name=s_first_name, last_name=s_last_name, school_name=s_school if s_school else None)
                            st.success(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —É—á–µ–Ω–∏–∫: {student_to_add.last_name} {student_to_add.first_name} (ID: {student_to_add.student_id}).")
                        except Exception as create_e:
                            if "UNIQUE constraint failed: Students.first_name, Students.last_name, Students.school_name" in str(create_e):
                                st.error(f"–û—à–∏–±–∫–∞: –£—á–µ–Ω–∏–∫ {s_last_name} {s_first_name} –∏–∑ —à–∫–æ–ª—ã '{s_school}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –µ–≥–æ.")
                            else:
                                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—á–µ–Ω–∏–∫–∞: {create_e}")
                            student_to_add = None

                    if student_to_add:
                        try:
                            participation = crud.add_student_to_group(db, student_id=student_to_add.student_id, group_id=selected_group_id)
                            if participation:
                                st.success(f"–£—á–µ–Ω–∏–∫ '{student_to_add.last_name} {student_to_add.first_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω/—É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ '{selected_group_name}'.")
                                st.rerun()
                            else:
                                st.warning(f"–£—á–µ–Ω–∏–∫ '{student_to_add.last_name} {student_to_add.first_name}' —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ.")
                        except Exception as add_e:
                             st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–µ–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø—É: {add_e}")
                             st.exception(add_e)
    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å —É—á–µ–Ω–∏–∫–∞–º–∏.")
    
    st.divider()
    st.header("–í—Å–µ —É—á–µ–Ω–∏–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    all_db_students = crud.get_all_students(db)
    if all_db_students:
        all_student_data = [{
            "ID": s.student_id, "–§–∞–º–∏–ª–∏—è": s.last_name, "–ò–º—è": s.first_name, 
            "–®–∫–æ–ª–∞": s.school_name or "-", 
            "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": s.registration_date.strftime('%Y-%m-%d %H:%M')
        } for s in all_db_students]
        st.dataframe(pd.DataFrame(all_student_data).set_index("ID"), use_container_width=True)
    else:
        st.info("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞.")


finally:
    if 'db' in locals() and db:
        db.close()