import streamlit as st
from sqlalchemy.orm import Session
import pandas as pd
import datetime
import sys
import os

project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

from core import crud
from core.crud import get_db
from core.models import OlympiadLevelEnum, AwardEnum

st.set_page_config(layout="wide")
st.title("üèÜ –û–ª–∏–º–ø–∏–∞–¥—ã –∏ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")

db_session_generator = get_db()
db: Session = next(db_session_generator)

try:
    if 'selected_olympiad_id' not in st.session_state:
        st.session_state.selected_olympiad_id = None

    col1, col2 = st.columns([1, 2])

    with col1:
        st.header("–°–ø–∏—Å–æ–∫ –û–ª–∏–º–ø–∏–∞–¥")
        
        subjects = list(set(o.subject for o in crud.get_all_olympiads(db)))
        subject_filter = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É:", options=["–í—Å–µ"] + subjects, key="olympiad_subject_filter")
        
        olympiads_query = crud.get_all_olympiads(db, subject_filter=None if subject_filter == "–í—Å–µ" else subject_filter)
        
        if not olympiads_query:
            st.info("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –æ–ª–∏–º–ø–∏–∞–¥—ã (–∏–ª–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É).")
        else:
            olympiad_names = [f"{o.olympiad_name} ({o.olympiad_date.strftime('%Y-%m-%d')})" for o in olympiads_query]
            selected_olympiad_name_display = st.radio(
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ª–∏–º–ø–∏–∞–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
                options=olympiad_names,
                key="olympiad_selector_radio"
            )
            if selected_olympiad_name_display:
                st.session_state.selected_olympiad_id = olympiads_query[olympiad_names.index(selected_olympiad_name_display)].olympiad_id


        with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –æ–ª–∏–º–ø–∏–∞–¥—É", expanded=False):
            with st.form("new_olympiad_form", clear_on_submit=True):
                ol_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã*")
                ol_date = st.date_input("–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è*", value=datetime.date.today())
                ol_level_value = st.selectbox(
                    "–£—Ä–æ–≤–µ–Ω—å –æ–ª–∏–º–ø–∏–∞–¥—ã*",
                    options=[ol.value for ol in OlympiadLevelEnum],
                    format_func=lambda x: x
                )
                ol_subject = st.text_input("–ü—Ä–µ–¥–º–µ—Ç*", placeholder="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
                ol_organizer = st.text_input("–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä")
                submitted_ol = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É")

                if submitted_ol:
                    if not ol_name or not ol_date or not ol_level_value or not ol_subject:
                        st.warning("–ù–∞–∑–≤–∞–Ω–∏–µ, –¥–∞—Ç–∞, —É—Ä–æ–≤–µ–Ω—å –∏ –ø—Ä–µ–¥–º–µ—Ç –æ–ª–∏–º–ø–∏–∞–¥—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.")
                    else:
                        try:
                            ol_level_enum = OlympiadLevelEnum(ol_level_value)
                            created_ol = crud.create_olympiad(
                                db,
                                olympiad_name=ol_name,
                                olympiad_date=ol_date,
                                level=ol_level_enum,
                                subject=ol_subject,
                                organizer=ol_organizer
                            )
                            st.success(f"–û–ª–∏–º–ø–∏–∞–¥–∞ '{created_ol.olympiad_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                            st.session_state.selected_olympiad_id = created_ol.olympiad_id
                            st.rerun()
                        except Exception as e:
                            if "UNIQUE constraint failed: Olympiads.olympiad_name, Olympiads.olympiad_date, Olympiads.subject" in str(e):
                                st.error(f"–û—à–∏–±–∫–∞: –û–ª–∏–º–ø–∏–∞–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –¥–∞—Ç–æ–π –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                            else:
                                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã: {e}")
                                st.exception(e)
    
    with col2:
        if st.session_state.selected_olympiad_id:
            olympiad = crud.get_olympiad_by_id(db, st.session_state.selected_olympiad_id)
            if olympiad:
                st.header(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ª–∏–º–ø–∏–∞–¥—ã: {olympiad.olympiad_name}")
                st.markdown(f"**–î–∞—Ç–∞:** {olympiad.olympiad_date.strftime('%d.%m.%Y')} | **–£—Ä–æ–≤–µ–Ω—å:** {olympiad.olympiad_level.value} | **–ü—Ä–µ–¥–º–µ—Ç:** {olympiad.subject}")
                if olympiad.organizer:
                    st.markdown(f"**–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:** {olympiad.organizer}")
                
                st.divider()
                st.subheader("–í–Ω–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞")
                with st.form(f"add_olympiad_result_form_{olympiad.olympiad_id}", clear_on_submit=True):
                    all_students = crud.get_all_students(db)
                    student_options = {f"{s.last_name} {s.first_name} (ID: {s.student_id})": s.student_id for s in all_students}
                    
                    if not student_options:
                        st.warning("–í –±–∞–∑–µ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
                    else:
                        selected_student_label = st.selectbox("–£—á–µ–Ω–∏–∫*:", options=list(student_options.keys()))
                        
                        award_value = st.selectbox(
                            "–ù–∞–≥—Ä–∞–¥–∞*:",
                            options=[aw.value for aw in AwardEnum],
                            format_func=lambda x: x
                        )
                        score = st.number_input("–ë–∞–ª–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):", value=None, step=0.1, format="%.1f")
                        details = st.text_input("–î–µ—Ç–∞–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–ø—Ä. '8 –∫–ª–∞—Å—Å', '–ó–∞–æ—á–Ω—ã–π —Ç—É—Ä'):")
                        doc_link = st.text_input("–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–ø–ª–æ–º/—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):")
                        
                        submitted_result = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

                        if submitted_result:
                            if not selected_student_label or not award_value:
                                st.warning("–£—á–µ–Ω–∏–∫ –∏ –Ω–∞–≥—Ä–∞–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.")
                            else:
                                student_id_to_add = student_options[selected_student_label]
                                award_enum = AwardEnum(award_value)
                                try:
                                    crud.add_olympiad_result(
                                        db,
                                        student_id=student_id_to_add,
                                        olympiad_id=olympiad.olympiad_id,
                                        award=award_enum,
                                        score=score,
                                        details=details,
                                        result_document_link=doc_link
                                    )
                                    st.success(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è '{selected_student_label}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.")
                                    st.rerun()
                                except Exception as e:
                                    if "UNIQUE constraint failed" in str(e): # Be more specific if possible
                                        st.error("–û—à–∏–±–∫–∞: –¢–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—É—á–µ–Ω–∏–∫, –æ–ª–∏–º–ø–∏–∞–¥–∞, –¥–µ—Ç–∞–ª–∏) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                                    else:
                                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
                                        st.exception(e)
                
                st.divider()
                st.subheader("–°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —ç—Ç–æ–π –æ–ª–∏–º–ø–∏–∞–¥–µ")
                results_for_olympiad = crud.get_olympiad_results_for_olympiad(db, olympiad.olympiad_id)
                if results_for_olympiad:
                    results_data = []
                    for res in results_for_olympiad:
                        student = crud.get_student_by_id(db, res.student_id) # Could be optimized
                        results_data.append({
                            "ID": res.olympiad_result_id,
                            "–§–∞–º–∏–ª–∏—è": student.last_name if student else "N/A",
                            "–ò–º—è": student.first_name if student else "N/A",
                            "–ù–∞–≥—Ä–∞–¥–∞": res.award.value,
                            "–ë–∞–ª–ª": res.score if res.score is not None else "-",
                            "–î–µ—Ç–∞–ª–∏": res.details or "-",
                            "–°—Å—ã–ª–∫–∞": res.result_document_link or "-"
                        })
                    st.dataframe(pd.DataFrame(results_data).set_index("ID"), use_container_width=True)
                else:
                    st.info("–ü–æ —ç—Ç–æ–π –æ–ª–∏–º–ø–∏–∞–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–Ω–µ—Å–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

            else:
                st.info("–û–ª–∏–º–ø–∏–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
        else:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ª–∏–º–ø–∏–∞–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.")

finally:
    if 'db' in locals() and db:
        db.close()